library(tidyverse)
# simulation results
simul_results <- read_csv('data/simulation/runs/pure_strats/simul_weighted_forages_10_10_25.csv')
# first col is the pd index, then reorder to place level and forager first
simul_results <- simul_results[2:length(simul_results)] |>
relocate(forager, level)
# level arrangements
arrangements <- read_csv('data/level_arrangements/all_levels_arrangements.csv')
# or read in a single file
expanded_df <- read_csv('data/simulation/expansion_chunks/exp_for11_lvl_1.csv')
names(expanded_df)
# clean
expanded_df <- expanded_df |>
mutate(
forager = as.factor(forager),
obj_ID = as.factor(obj_ID),
used = as.factor(used)
)
# make used val for current collected coconut na
expanded_df$used[which(is.na(expanded_df$turning_angle))] = NA
expanded_df$neighbor_value[which(is.na(expanded_df$turning_angle))] = NA
expanded_df$distance[which(is.na(expanded_df$turning_angle))] = NA
unique(expanded_df$forager)
plot_cov_and_path <- function(
for_num, lvl, col_num, cov = 'dist', path=simul_results, exp_df=expanded_df,
arr=arrangements
) {
if(for_num %in% c(10, 15, 43)) {
strat = 'nn'
}
else if(for_num %in% c(13, 63, 80)) {
strat = 'ta'
}
else {
strat = 'clst'
}
# filter for path
path_df <- path |>
filter(strategy == strat & forager == for_num & level == lvl) |>
add_row(
strategy = simul_results$strategy[1], forager = for_num, level = lvl,
nn_weight = simul_results$nn_weight[1],
ta_weight = simul_results$ta_weight[1], clst_weight = simul_results$clst_weight[1],
pv_weight = simul_results$pv_weight[1], obj_ID = 0, x = 0, y = 0, time = 0, dist = 0,
point_value = 0, points = 0,
.before = 1
) |>
slice_head(n=col_num+2)
if(cov == 'dist') {
# look at nn
p <- exp_df |>
filter(forager == for_num & level == lvl & collection_num == col_num) |>
left_join(arr, by = join_by(level, obj_ID, point_value)) |>
ggplot() +
geom_path(
data = path_df, aes(x = x, y = y), linewidth = .2,
arrow = arrow(type = 'closed')
) +
geom_point(
aes(
x = x, y = y, size = as.factor(point_value), color = (1/distance),
shape = as.factor(used)
)
) +
scale_shape_manual(
'', labels = c('Unused', 'Used'), values = c(16, 17), na.value = 13
) +
scale_size_discrete(guide = 'none', range = c(3,5)) +
scale_color_viridis_c(
'Distance value', option = 'magma', end = .9, na.value = 'black',
n.breaks = 5
) +
theme_void()
} else if(cov == 'ta') {
# look at nn
p <- exp_df |>
filter(forager == for_num & level == lvl & collection_num == col_num) |>
left_join(arr, by = join_by(level, obj_ID, point_value)) |>
ggplot() +
geom_path(
data = path_df, aes(x = x, y = y), linewidth = .2,
arrow = arrow(type = 'closed')
) +
geom_point(
aes(
x = x, y = y, size = as.factor(point_value), color = cos(turning_angle),
shape = as.factor(used)
)
) +
scale_shape_manual(
'', labels = c('Unused', 'Used'), values = c(16, 17), na.value = 13
) +
scale_size_discrete(guide = 'none', range = c(3,5)) +
scale_color_viridis_c(
'Turning angle value', option = 'magma', end = .9, na.value = 'black',
n.breaks = 5
) +
theme_void()
} else if(cov == 'clst') {
# look at nn
p <- exp_df |>
filter(forager == for_num & level == lvl & collection_num == col_num) |>
left_join(arr, by = join_by(level, obj_ID, point_value)) |>
ggplot() +
geom_path(
data = path_df, aes(x = x, y = y), linewidth = .2,
arrow = arrow(type = 'closed')
) +
geom_point(
aes(
x = x, y = y, size = as.factor(point_value), color = neighbor_value,
shape = as.factor(used)
)
) +
scale_shape_manual(
'', labels = c('Unused', 'Used'), values = c(16, 17), na.value = 13
) +
scale_size_discrete(guide = 'none', range = c(3,5)) +
scale_color_viridis_c(
'Cluster value', option = 'magma', end = .9, na.value = 'black',
n.breaks = 5
) +
theme_void()
}
return(p)
}
plot_cov_and_path(11, 1, 0, cov = 'ta')
# simulation results
simul_results <- read_csv('data/simulation/runs/pure_strats/simul_weighted_forages_10_10_25.csv')
# first col is the pd index, then reorder to place level and forager first
simul_results <- simul_results[2:length(simul_results)] |>
relocate(forager, level) |>
mutate(
forager = as.factor(forager),
obj_ID = as.factor(obj_ID)
)
plot_cov_and_path(11, 1, 0, cov = 'ta')
rlang::last_trace()
str(simul_results)
str(expanded_df)
# simulation results
simul_results <- read_csv('data/simulation/runs/pure_strats/simul_weighted_forages_10_10_25.csv')
# first col is the pd index, then reorder to place level and forager first
simul_results <- simul_results[2:length(simul_results)] |>
relocate(forager, level)
# or read in a single file
expanded_df <- read_csv('data/simulation/expansion_chunks/exp_for11_lvl_1.csv')
# make used val for current collected coconut na
expanded_df$used[which(is.na(expanded_df$turning_angle))] = NA
expanded_df$neighbor_value[which(is.na(expanded_df$turning_angle))] = NA
expanded_df$distance[which(is.na(expanded_df$turning_angle))] = NA
unique(expanded_df$forager)
plot_cov_and_path(11, 1, 0, cov = 'ta')
plot_cov_and_path <- function(
for_num, lvl, col_num, cov = 'dist', path=simul_results, exp_df=expanded_df,
arr=arrangements
) {
if(for_num %in% c(10, 11, 15, 43)) {
strat = 'nn'
}
else if(for_num %in% c(13, 63, 80)) {
strat = 'ta'
}
else {
strat = 'clst'
}
# filter for path
path_df <- path |>
filter(strategy == strat & forager == for_num & level == lvl) |>
add_row(
strategy = simul_results$strategy[1], forager = for_num, level = lvl,
nn_weight = simul_results$nn_weight[1],
ta_weight = simul_results$ta_weight[1], clst_weight = simul_results$clst_weight[1],
pv_weight = simul_results$pv_weight[1], obj_ID = 0, x = 0, y = 0, time = 0, dist = 0,
point_value = 0, points = 0,
.before = 1
) |>
slice_head(n=col_num+2)
if(cov == 'dist') {
# look at nn
p <- exp_df |>
filter(forager == for_num & level == lvl & collection_num == col_num) |>
left_join(arr, by = join_by(level, obj_ID, point_value)) |>
ggplot() +
geom_path(
data = path_df, aes(x = x, y = y), linewidth = .2,
arrow = arrow(type = 'closed')
) +
geom_point(
aes(
x = x, y = y, size = as.factor(point_value), color = (1/distance),
shape = as.factor(used)
)
) +
scale_shape_manual(
'', labels = c('Unused', 'Used'), values = c(16, 17), na.value = 13
) +
scale_size_discrete(guide = 'none', range = c(3,5)) +
scale_color_viridis_c(
'Distance value', option = 'magma', end = .9, na.value = 'black',
n.breaks = 5
) +
theme_void()
} else if(cov == 'ta') {
# look at nn
p <- exp_df |>
filter(forager == for_num & level == lvl & collection_num == col_num) |>
left_join(arr, by = join_by(level, obj_ID, point_value)) |>
ggplot() +
geom_path(
data = path_df, aes(x = x, y = y), linewidth = .2,
arrow = arrow(type = 'closed')
) +
geom_point(
aes(
x = x, y = y, size = as.factor(point_value), color = cos(turning_angle),
shape = as.factor(used)
)
) +
scale_shape_manual(
'', labels = c('Unused', 'Used'), values = c(16, 17), na.value = 13
) +
scale_size_discrete(guide = 'none', range = c(3,5)) +
scale_color_viridis_c(
'Turning angle value', option = 'magma', end = .9, na.value = 'black',
n.breaks = 5
) +
theme_void()
} else if(cov == 'clst') {
# look at nn
p <- exp_df |>
filter(forager == for_num & level == lvl & collection_num == col_num) |>
left_join(arr, by = join_by(level, obj_ID, point_value)) |>
ggplot() +
geom_path(
data = path_df, aes(x = x, y = y), linewidth = .2,
arrow = arrow(type = 'closed')
) +
geom_point(
aes(
x = x, y = y, size = as.factor(point_value), color = neighbor_value,
shape = as.factor(used)
)
) +
scale_shape_manual(
'', labels = c('Unused', 'Used'), values = c(16, 17), na.value = 13
) +
scale_size_discrete(guide = 'none', range = c(3,5)) +
scale_color_viridis_c(
'Cluster value', option = 'magma', end = .9, na.value = 'black',
n.breaks = 5
) +
theme_void()
}
return(p)
}
plot_cov_and_path(11, 1, 0, cov = 'ta')
# view first 10 steps
for(i in 0:9) {
plot_cov_and_path(11, 1, i)
}
# view first 10 steps
for(i in 0:9) {
if(i == 0) {
plots <- list()
plots[[i+1]] <- plot_cov_and_path(11, 1, i)
}
else {
plots[[i+1]] <- plot_cov_and_path(11, 1, i)
}
}
for(i in 1:length(plots)) {
plots[[i]]
ans <- readline('View next step? y/n')
if(ans == 'y') {
# continue
}
else if(ans == 'n') {
break
}
}
plots[[1]]
plots[[2]]
for(i in 1:length(plots)) {
return(plots[[i]])
ans <- readline('View next step? y/n')
if(ans == 'y') {
# continue
}
else if(ans == 'n') {
break
}
}
length(plots)
for(i in 1:length(plots)) {
print(plots[[i]])
ans <- readline('View next step? y/n')
if(ans == 'y') {
# continue
}
else if(ans == 'n') {
break
}
}
# view first 10 steps
for(i in 0:9) {
if(i == 0) {
plots <- list()
plots[[i+1]] <- plot_cov_and_path(11, 1, i, cov = 'ta')
}
else {
plots[[i+1]] <- plot_cov_and_path(11, 1, i, cov = 'ta')
}
}
for(i in 1:length(plots)) {
print(plots[[i]])
ans <- readline('View next step? y/n')
if(ans == 'y') {
# continue
}
else if(ans == 'n') {
break
}
}
# view first 10 steps
for(i in 0:9) {
if(i == 0) {
plots <- list()
plots[[i+1]] <- plot_cov_and_path(11, 1, i, cov = 'clst')
}
else {
plots[[i+1]] <- plot_cov_and_path(11, 1, i, cov = 'clst')
}
}
for(i in 1:length(plots)) {
print(plots[[i]])
ans <- readline('View next step? y/n')
if(ans == 'y') {
# continue
}
else if(ans == 'n') {
break
}
}
View(expanded_df)
library(tidyverse)
# simulation results
simul_results <- read_csv('data/simulation/runs/pure_strats/simul_weighted_forages_10_20_25.csv')
# first col is the pd index, then reorder to place level and forager first
simul_results <- simul_results[2:length(simul_results)] |>
relocate(forager, level)
simul_results |>
group_by(strategy) |>
summarize(
n = n(),
nn_wt = mean(nn_weight),
ta_wt = mean(ta_weight),
clst_wt = mean(clst_weight)
)
View(simul_results)
library(tidyverse)
# simulation results
simul_results <- read_csv('data/simulation/runs/pure_strats/simul_weighted_forages_10_20_25.csv')
View(simul_results)
# first col is the pd index, then reorder to place level and forager first
simul_results <- simul_results[2:length(simul_results)] |>
relocate(forager, level)
# first col is the pd index, then reorder to place level and forager first
simul_results <- simul_results |>
relocate(forager, level)
# simulation results
simul_results <- read_csv('data/simulation/runs/pure_strats/simul_weighted_forages_10_20_25.csv')
# first col is the pd index, then reorder to place level and forager first
simul_results <- simul_results |>
relocate(forager, level)
View(simul_results)
simul_results |>
group_by(strategy) |>
summarize(
n = n(),
nn_wt = mean(nn_weight),
ta_wt = mean(ta_weight),
clst_wt = mean(clst_weight)
)
# level arrangements
arrangements <- read_csv('data/level_arrangements/all_levels_arrangements.csv')
# see how performance varied across levels and one weight at a time
simul_performance |>
ggplot() +
geom_point(aes(x = ta_wt, y = rmi, color = as.factor(strategy))) +
geom_vline(aes(xintercept = 0), linetype = 'dashed', linewidth = .25, color = 'black') +
geom_point(aes(x = nn_wt, y = total_time, color = as.factor(level))) +
scale_color_viridis_d(guide = 'none', option = 'rocket', begin = .3, end = .9) +
theme_bw() +
facet_wrap(~level)
# see how performance varied across levels and one weight at a time
simul_results |>
group_by(strategy, forager, level) |>
summarize(
total_time = max(time),
total_dist = sum(dist),
ta_wt = unique(ta_weight),
nn_wt = unique(nn_weight),
clst_wt = unique(clst_weight)
) |>
ggplot() +
geom_point(aes(x = ta_wt, y = total_time, color = as.factor(strategy))) +
geom_vline(aes(xintercept = 0), linetype = 'dashed', linewidth = .25, color = 'black') +
geom_point(aes(x = nn_wt, y = total_time, color = as.factor(level))) +
scale_color_viridis_d(guide = 'none', option = 'rocket', begin = .3, end = .9) +
theme_bw() +
facet_wrap(~level)
# see how performance varied across levels and one weight at a time
simul_results |>
group_by(strategy, forager, level) |>
summarize(
total_time = max(time),
total_dist = sum(dist),
ta_wt = unique(ta_weight),
nn_wt = unique(nn_weight),
clst_wt = unique(clst_weight)
) |>
ggplot() +
geom_point(aes(x = ta_wt, y = total_time, color = as.factor(strategy))) +
geom_vline(aes(xintercept = 0), linetype = 'dashed', linewidth = .25, color = 'black') +
geom_point(aes(x = nn_wt, y = total_time, color = as.factor(level))) +
scale_color_viridis_d(option = 'rocket', begin = .3, end = .9) +
theme_bw() +
facet_wrap(~level)
# see how performance varied across levels and one weight at a time
simul_results |>
group_by(strategy, forager, level) |>
summarize(
total_time = max(time),
total_dist = sum(dist),
ta_wt = unique(ta_weight),
nn_wt = unique(nn_weight),
clst_wt = unique(clst_weight)
) |>
ggplot() +
geom_vline(aes(xintercept = 0), linetype = 'dashed', linewidth = .25, color = 'black') +
geom_point(aes(x = nn_wt, y = total_time, color = as.factor(level))) +
scale_color_viridis_d(option = 'rocket', begin = .3, end = .9) +
theme_bw() +
facet_wrap(~level)
# see how performance varied across levels and one weight at a time
simul_results |>
group_by(strategy, forager, level) |>
summarize(
total_time = max(time),
total_dist = sum(dist),
ta_wt = unique(ta_weight),
nn_wt = unique(nn_weight),
clst_wt = unique(clst_weight)
) |>
ggplot() +
geom_vline(aes(xintercept = 0), linetype = 'dashed', linewidth = .25, color = 'black') +
geom_point(aes(x = nn_wt, y = total_time, color = as.factor(strategy))) +
scale_color_viridis_d(option = 'rocket', begin = .3, end = .9) +
theme_bw() +
facet_wrap(~level)
