labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
scale_fill_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
theme_bw()
simul_performance |>
ggplot(
aes(
x = total_time, y = as.factor(level), fill = as.factor(strategy),
color = as.factor(strategy)
)
) +
geom_density_ridges(alpha = .3) +
geom_point(position = position_jitterdodge(jitter.height = .1, dodge.width = .1)) +
scale_x_continuous(n.breaks = 10) +
scale_color_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
scale_fill_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
theme_bw()
simul_performance |>
ggplot(
aes(
x = total_time, y = as.factor(level), fill = as.factor(strategy),
color = as.factor(strategy)
)
) +
geom_density_ridges(alpha = .3) +
geom_point(position = position_jitterdodge(jitter.height = .15, dodge.width = .15)) +
scale_x_continuous(n.breaks = 10) +
scale_color_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
scale_fill_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
labs(x = 'Time (s)', y = 'Game level') +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major.y = element_blank(),
axis.line = element_line(color = 'grey20', linewidth = 1)
)
simul_performance |>
ggplot(
aes(
x = total_time, y = as.factor(level), fill = as.factor(strategy),
color = as.factor(strategy)
)
) +
geom_density_ridges(alpha = .3) +
geom_point(position = position_jitterdodge(jitter.height = .15, dodge.width = -.15)) +
scale_x_continuous(n.breaks = 10) +
scale_color_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
scale_fill_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
labs(x = 'Time (s)', y = 'Game level') +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major.y = element_blank(),
axis.line = element_line(color = 'grey20', linewidth = 1)
)
simul_performance |>
ggplot(
aes(
x = total_time, y = as.factor(level), fill = as.factor(strategy),
color = as.factor(strategy)
)
) +
geom_density_ridges(alpha = .3) +
geom_point(position = position_jitterdodge(jitter.height = .15, dodge.width = -.3)) +
scale_x_continuous(n.breaks = 10) +
scale_color_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
scale_fill_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
labs(x = 'Time (s)', y = 'Game level') +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major.y = element_blank(),
axis.line = element_line(color = 'grey20', linewidth = 1)
)
simul_performance |>
ggplot(
aes(
x = total_time, y = as.factor(level), fill = as.factor(strategy),
color = as.factor(strategy)
)
) +
geom_density_ridges(alpha = .3) +
# geom_point(position = position_jitterdodge(jitter.height = .15, dodge.width = -.3)) +
scale_x_continuous(n.breaks = 10) +
scale_color_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
scale_fill_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
labs(x = 'Time (s)', y = 'Game level') +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major.y = element_blank(),
axis.line = element_line(color = 'grey20', linewidth = .75),
axis.ticks = element_line(color = 'grey20', linewidth = .5)
)
ggsave(
'fig_output/simulation/pure_strat_time_comp_ridges.png', device = 'png',
height = 10, width = 6, units = 'in'
)
simul_performance |>
ggplot(
aes(
x = total_time, y = as.factor(level), fill = as.factor(strategy),
color = as.factor(strategy)
)
) +
geom_density_ridges(alpha = .3) +
# geom_point(position = position_jitterdodge(jitter.height = .15, dodge.width = -.3)) +
scale_x_continuous(n.breaks = 10) +
scale_color_manual(
'Strategy', position = 'bottom', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
scale_fill_manual(
'Strategy', position = 'bottom', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
labs(x = 'Time (s)', y = 'Game level') +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major.y = element_blank(),
axis.line = element_line(color = 'grey20', linewidth = .75),
axis.ticks = element_line(color = 'grey20', linewidth = .5)
)
simul_performance |>
ggplot(
aes(
x = total_time, y = as.factor(level), fill = as.factor(strategy),
color = as.factor(strategy)
)
) +
geom_density_ridges(alpha = .3) +
# geom_point(position = position_jitterdodge(jitter.height = .15, dodge.width = -.3)) +
scale_x_continuous(n.breaks = 10) +
scale_color_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
scale_fill_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
labs(x = 'Time (s)', y = 'Game level') +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major.y = element_blank(),
axis.line = element_line(color = 'grey20', linewidth = .75),
axis.ticks = element_line(color = 'grey20', linewidth = .5),
legend.position = 'top',
legend.justification = 'left',
legend.direction = 'horizontal'
)
ggsave(
'fig_output/simulation/pure_strat_time_comp_ridges.png', device = 'png',
height = 10, width = 6, units = 'in'
)
simul_performance |>
ggplot(
aes(
x = total_time, y = as.factor(level), fill = as.factor(strategy),
color = as.factor(strategy)
)
) +
geom_density_ridges(alpha = .3) +
# geom_point(position = position_jitterdodge(jitter.height = .15, dodge.width = -.3)) +
scale_x_continuous(n.breaks = 10) +
scale_color_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
scale_fill_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
labs(x = 'Time (s)', y = 'Game level') +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major.y = element_blank(),
axis.line.x = element_line(color = 'grey20', linewidth = .75),
axis.line.y = element_blank(),
axis.ticks = element_line(color = 'grey20', linewidth = .5),
legend.position = 'top',
legend.justification = 'left',
legend.direction = 'horizontal'
)
simul_performance |>
ggplot(
aes(
x = total_time, y = as.factor(level), fill = as.factor(strategy),
color = as.factor(strategy)
)
) +
geom_density_ridges(alpha = .3) +
# geom_point(position = position_jitterdodge(jitter.height = .15, dodge.width = -.3)) +
scale_x_continuous(n.breaks = 10) +
scale_color_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
scale_fill_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
labs(x = 'Time (s)', y = 'Game level') +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major.y = element_blank(),
axis.line.x = element_line(color = 'grey20', linewidth = .75),
axis.line.y = element_blank(),
axis.ticks.x = element_line(color = 'grey20', linewidth = .5),
axis.ticks.y = element_blank(),
legend.position = 'top',
legend.justification = 'left',
legend.direction = 'horizontal'
)
library(showtext)
showtext.opts(dpi = 300)
showtext_auto()
font_paths()
font_add('Aptos', 'Aptos.ttf')
font_add('Aptos', regular = 'Aptos.ttf')
font_add('Aptos', regular = 'aptos.ttf')
font_add('Aptos', regular = 'C:\\Windows\\Fonts\\Aptos.ttf')
font_add('Aptos', regular = 'Aptos\\Aptos Regular.ttf')
font_add('Aptos', regular = 'Aptos\\Aptos.ttf')
font_files()
font_installed()
font_install('aptos')
font_paths()
font_paths('Aptos')
font_paths('Aptos.ttf')
font_add('Aptos', regular = 'C:\\Users\\lcwat\\AppData\\Local\\Microsoft\\Windows\\Fonts\\Aptos.ttf')
font_paths()
font_paths('C:\\Users\\lcwat\\AppData\\Local\\Microsoft\\Windows\\Fonts')
font_add(
'Aptos', regular = 'Aptos.ttf'
)
simul_performance |>
ggplot(
aes(
x = total_time, y = as.factor(level), fill = as.factor(strategy),
color = as.factor(strategy)
)
) +
geom_density_ridges(alpha = .3) +
# geom_point(position = position_jitterdodge(jitter.height = .15, dodge.width = -.3)) +
scale_x_continuous(n.breaks = 10) +
scale_color_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
scale_fill_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
labs(x = 'Time (s)', y = 'Game level') +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major.y = element_blank(),
axis.line.x = element_line(color = 'grey20', linewidth = .75),
axis.line.y = element_blank(),
axis.ticks.x = element_line(color = 'grey20', linewidth = .5),
axis.ticks.y = element_blank(),
text = element_text(family = 'Aptos'),
legend.position = 'top',
legend.justification = 'left',
legend.direction = 'horizontal'
)
simul_performance |>
ggplot(
aes(
x = total_time, y = as.factor(level), fill = as.factor(strategy),
color = as.factor(strategy)
)
) +
geom_density_ridges(alpha = .3) +
# geom_point(position = position_jitterdodge(jitter.height = .15, dodge.width = -.3)) +
scale_x_continuous(n.breaks = 10) +
scale_color_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
scale_fill_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
labs(x = 'Time (s)', y = 'Game level') +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major.y = element_blank(),
axis.line.x = element_line(color = 'grey20', linewidth = .75),
axis.line.y = element_blank(),
axis.ticks.x = element_line(color = 'grey20', linewidth = .5),
axis.ticks.y = element_blank(),
text = element_text(family = 'Aptos'),
axis.text = element_text(size = 10),
axis.title = element_text(size = 14, face = 'bold'),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14, face = 'bold'),
legend.position = 'top',
legend.justification = 'left',
legend.direction = 'horizontal'
)
ggsave(
'fig_output/simulation/pure_strat_time_comp_ridges.png', device = 'png',
height = 10, width = 8, units = 'in'
)
ggsave(
'fig_output/simulation/pure_strat_time_comp_ridges.png', device = 'png',
height = 10, width = 8, units = 'in', dpi = 300
)
ggsave(
'fig_output/simulation/pure_strat_time_comp_ridges.png', device = 'png',
height = 10, width = 8, units = 'in', dpi = 400
)
ggsave(
'fig_output/simulation/pure_strat_time_comp_ridges.png', device = 'png',
height = 10, width = 8, units = 'in', dpi = 300
)
source('R/scripts/src/entropy.R') # rmi
View(simul_performance)
simul_results |>
filter(strategy == 'ta' & forager == 0 & level == 2) |>
pull(obj_ID) |>
entropy()
# find entropy of each run
rmis <- vector('numeric', length = nrow(simul_performance))
# loop through strategies
for(strat in unique(simul_performance$strategy)) {
index = 1
# loop through foragers
for(i in 0:99) {
# loop through levels
for(j in 1:10) {
# grab sequence of collections
seq <- simul_results |>
filter(strategy == strat & forager == i & level == j) |>
pull(obj_ID)
# calc entropy
e <- entropy(SEQ = seq, max3 = 110, max4 = 30, max5 = 10)
# one minus the minimum e approximates the routine movement index
rmi <- 1 - min(e)
# update index
if(strat != 'clst') {
index = index + 1
}
else if(i == 0 & j == 1) {
index = j
}
rmis[index] = rmi
cat('\rCompleted', strat, 'forager', i, 'level', j, '.')
}
}
}
strats = unique(simul_performance$strategy)
simul_results |>
filter(strategy == strats[1] & forager == 0 & level == 2) |>
pull(obj_ID) |>
entropy()
simul_results |>
filter(strategy == strats[1] & forager == 0 & level == 2) |>
pull(obj_ID) |>
entropy()
simul_results |>
filter(strategy == strats[1] & forager == 0 & level == 2) |>
pull(obj_ID) |>
entropy()
simul_results |>
filter(strategy == strats[1] & forager == 0 & level == 1) |>
pull(obj_ID) |>
entropy()
# find entropy of each run
rmis <- vector('numeric')
# find entropy of each run
rmis <- vector('numeric')
strats <- vector('character')
foragers <- vector('numeric')
levels <- vector('numeric')
# loop through strategies
for(strat in unique(simul_performance$strategy)) {
# loop through foragers
for(i in 0:99) {
# loop through levels
for(j in 1:10) {
# grab sequence of collections
e <- simul_results |>
filter(strategy == strat & forager == i & level == j) |>
pull(obj_ID) |>
entropy()
# one minus the minimum e approximates the routine movement index
rmi <- 1 - min(e)
# add to vector
rmis <- c(rmis, rmi)
strats <- c(strats, strat)
foragers <- c(foragers, i)
levels <- c(levels, j)
cat('\rCompleted', strat, 'forager', i, 'level', j, '.')
}
}
}
# put into tibble
rmi_tibble <- tibble(
strategy = strats, forager = foragers, level = levels, rmi = rmis
)
rmi_tibble |>
ggplot(aes(x = rmi, fill = as.factor(strategy))) +
geom_density(alpha = .3) +
theme_bw() +
facet_wrap(~level)
rmi_tibble |>
ggplot(
aes(
x = rmi, y = as.factor(level), fill = as.factor(strategy),
color = as.factor(strategy)
)
) +
geom_density_ridges(alpha = .3) +
# geom_point(position = position_jitterdodge(jitter.height = .15, dodge.width = -.3)) +
scale_x_continuous(n.breaks = 10) +
scale_color_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
scale_fill_manual(
'Strategy', values = c(clrs[1], clrs[6], clrs[4]),
labels = c('Cluster', 'Nearest neighbor', 'Turning angle')
) +
labs(x = 'RMI', y = 'Game level') +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major.y = element_blank(),
axis.line.x = element_line(color = 'grey20', linewidth = .75),
axis.line.y = element_blank(),
axis.ticks.x = element_line(color = 'grey20', linewidth = .5),
axis.ticks.y = element_blank(),
text = element_text(family = 'Aptos'),
axis.text = element_text(size = 10),
axis.title = element_text(size = 14, face = 'bold'),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14, face = 'bold'),
legend.position = 'top',
legend.justification = 'left',
legend.direction = 'horizontal'
)
ggsave(
'fig_output/simulation/pure_strat_rmi_comp_ridges.png', device = 'png',
height = 10, width = 8, units = 'in', dpi = 300
)
# merge with performance data
simul_performance_and_rmi <- left_join(simul_performance, rmi_tibble)
View(simul_performance_and_rmi)
# write
write_csv(simul_performance_and_rmi, 'data/simulation/performance/perf_and_rmi_summary.csv')
library(tidyverse)
# level arrangements
arrangements <- read_csv('data/level_arrangements/all_levels_arrangements.csv')
# find file names
df_file_names <- list.files('data/simulation/expansion_chunks')
# load expanded dfs and concat into one dataset
for(i in 1:length(df_file_names)) {
if(i == 1) {
# init df
df <- read_csv(paste0('data/simulation/expansion_chunks/', df_file_names[i]))
}
else {
# add to df
df_to_add <- read_csv(paste0('data/simulation/expansion_chunks/', df_file_names[i]))
df <- rbind(df, df_to_add)
}
}
contains(df_file_names[1], '_clst_')
str_detect(df_file_names[1], '_clst_')
str_detect(df_file_names[500], '_clst_')
